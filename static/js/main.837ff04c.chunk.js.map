{"version":3,"sources":["components/SignUp/index.js","components/LoginPage/index.js","components/LoginOn/index.js","App.js","serviceWorker.js","index.js"],"names":["SingUp","props","console","log","className","action","method","onSubmit","e","preventDefault","username","target","value","password","SignOn","email","alert","type","name","placeholder","LoginPage","Login","onClick","onSignUp","LoginOn","userName","onLoginPage","eMail","App","useState","mode","setMode","_contents","data","setData","userdata","setUserdata","emaildata","setEmaildata","_username","_password","i","length","datas","onLogin","_email","_data","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oTAwDeA,G,YAhDA,SAACC,GAEZC,QAAQC,IAAI,iBAuBhB,OACM,yBAAKC,UAAU,cACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,YACX,2CACF,0BAAMC,OAAO,IAAIC,OAAO,OAAOC,SAxBtB,SAACC,GAClBA,EAAEC,iBACF,IAAIC,EAAWF,EAAEG,OAAOD,SAASE,MAC7BC,EAAWL,EAAEG,OAAOE,SAASD,MAE7BF,GAAaG,EAGbZ,EAAMa,OACFN,EAAEG,OAAOD,SAASE,MAClBJ,EAAEG,OAAOE,SAASD,MAClBJ,EAAEG,OAAOI,MAAMH,OALnBI,MAAM,sCASVd,QAAQC,IAAI,iBAUA,2BAAOC,UAAU,WAAWa,KAAK,OAAOC,KAAK,WAAYC,YAAY,aACrE,2BAAOf,UAAU,WAAWa,KAAK,WAAWC,KAAK,WAAWC,YAAY,aACxE,2BAAOf,UAAU,QAAQa,KAAK,OAAOC,KAAK,QAAQC,YAAY,UAC9D,2BAAOf,UAAU,SAASa,KAAK,SAASL,MAAM,aAGpD,yBAAKR,UAAU,YACb,2CACA,yMACA,yBAAKA,UAAU,aCUhBgB,G,MAjDG,SAACnB,GAEfC,QAAQC,IAAI,oBAsBd,OACE,yBAAKC,UAAU,cACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,YACX,yCACA,0BAAMC,OAAO,IAAIC,OAAO,OAAOC,SApBvB,SAACC,GACjBA,EAAEC,iBACF,IAAIC,EAAWF,EAAEG,OAAOD,SAASE,MAC7BC,EAAWL,EAAEG,OAAOE,SAASD,MAE7BF,GAAaG,EAGbZ,EAAMoB,MACFb,EAAEG,OAAOD,SAASE,MAClBJ,EAAEG,OAAOE,SAASD,OAJtBI,MAAM,wCAeE,2BAAOZ,UAAU,WAAWa,KAAK,OAAOC,KAAK,WAAWC,YAAY,aACpE,2BAAOf,UAAU,WAAWa,KAAK,WAAWC,KAAK,WAAWC,YAAY,aACxE,2BAAOf,UAAU,SAASa,KAAK,SAASL,MAAM,YAElD,yBAAKR,UAAU,QACX,2BAAOa,KAAK,SAASL,MAAM,UAAUU,QA/BlC,SAACd,GAChBA,EAAEC,iBACFR,EAAMsB,gBAgCF,yBAAKnB,UAAU,YACX,2CACA,yMACA,yBAAKA,UAAU,aCZhBoB,G,MA9BC,SAACvB,GAQf,OACE,yBAAKG,UAAU,cACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,YACX,uCAAaH,EAAMwB,UACnB,wDAA6B,yCAC7B,yBAAKrB,UAAU,QACb,2BAAOa,KAAK,SAASL,MAAM,SAASU,QAbhC,SAACd,GACnBA,EAAEC,iBACFR,EAAMyB,mBAcE,yBAAKtB,UAAU,YACX,yBAAKA,UAAU,OACb,wCAAcH,EAAMwB,UACpB,oCAAUxB,EAAM0B,aCuDnBC,MA7Ef,WACE1B,QAAQC,IAAI,cADC,MAGU0B,mBAAS,SAHnB,mBAGNC,EAHM,KAGDC,EAHC,KAOTC,EAAY,KAMVN,EAAc,WAClBK,EAAQ,UAdG,EAqBUF,mBAAS,IArBnB,mBAqBNI,EArBM,KAqBDC,EArBC,OAwBiBL,qBAxBjB,mBAwBNM,EAxBM,KAwBGC,EAxBH,OAyBmBP,qBAzBnB,mBAyBNQ,EAzBM,KAyBIC,EAzBJ,KAqEb,MATc,UAATR,EACDE,EAAY,kBAAC,EAAD,CAAWT,SApDN,WACnBQ,EAAQ,WAmDyCV,MAtBnC,SAACkB,EAAUC,GAEzB,IADA,IAAIC,EAAI,EACFA,EAAIR,EAAKS,QAAO,CACpB,IAAIC,EAAQV,EAAKQ,GACjB,GAAGE,EAAMjC,WAAa6B,EAAU,CAC9B,GAAGI,EAAM9B,WAAa2B,EAAU,CAC9BJ,EAAYO,EAAMjC,UAClB4B,EAAaK,EAAM5B,OACnBb,QAAQC,IAAI,iBAAiBwC,EAAMjC,UACnCqB,EAAQ,WACR,MAEAf,MAAM,SACN,MAGJyB,GAAQ,MAOQ,WAATX,EACPE,EAAY,kBAAC,EAAD,CAAQY,QAASlB,EAAaZ,OAhC/B,SAACyB,EAAUC,EAAUK,GAClC,IAAIC,EAAQb,EAAKc,OACf,CAACrC,SAAS6B,EAAW1B,SAAS2B,EAAWzB,MAAM8B,IAE/CX,EAAQY,GACRf,EAAQ,YA4BQ,YAATD,IAAoB5B,QAAQC,IAAI,WArC3B,MAsCZ6B,EAAY,kBAAC,EAAD,CAASP,SAAUU,EAAUR,MAAOU,EAAWX,YAAaA,KAKxE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,mBACd4B,ICnEWgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.837ff04c.chunk.js","sourcesContent":["import React,{ useState } from 'react';\r\nimport './style.css';\r\n\r\n/**\r\n* @author\r\n* @function SingUp\r\n**/\r\n\r\nconst SingUp = (props) => {\r\n  \r\n    console.log('signUp render');\r\n\r\n    // dataPush->\r\n    \r\n    const onSignUpData = (e) =>{\r\n        e.preventDefault();\r\n        let username = e.target.username.value;\r\n        let password = e.target.password.value;\r\n\r\n        if(!username || !password){\r\n            alert('please enter username and password');\r\n        }else{\r\n            props.SignOn(\r\n                e.target.username.value,\r\n                e.target.password.value,\r\n                e.target.email.value\r\n            );\r\n        }\r\n        \r\n        console.log('sumbit data');\r\n    }\r\n    \r\n\r\nreturn(\r\n      <div className=\"container2\">\r\n          <div className=\"box2\">\r\n              <div className=\"content1\">\r\n                  <header>Sign Up</header>\r\n                <form action=\"/\" method=\"post\" onSubmit={onSignUpData}>\r\n                    <input className=\"username\" type=\"text\" name=\"username\"  placeholder=\"username\"></input>\r\n                    <input className=\"password\" type=\"password\" name=\"password\" placeholder=\"password\"></input>\r\n                    <input className=\"email\" type=\"text\" name=\"email\" placeholder=\"email\"></input>\r\n                    <input className=\"submit\" type=\"submit\" value=\"submit\"></input>\r\n                </form>\r\n              </div>\r\n              <div className=\"content2\">\r\n                <h3>Lorem Ipsum</h3>\r\n                <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.</p>\r\n                <div className=\"img\"></div>\r\n            </div>\r\n            </div>\r\n      </div>\r\n   )\r\n\r\n }\r\n\r\nexport default SingUp","import React,{ useState } from 'react';\r\nimport './style.css';\r\n// import {NavLink} from 'react-router-dom';\r\n\r\n/**\r\n* @author\r\n* @function LoginPage\r\n**/\r\n\r\nconst LoginPage = (props) => {\r\n\r\n    console.log('LoginPage render');\r\n\r\n    const onSignPage = (e) =>{\r\n        e.preventDefault();\r\n        props.onSignUp();\r\n    }\r\n\r\n    const onLoginData = (e) => {\r\n        e.preventDefault();\r\n        let username = e.target.username.value;\r\n        let password = e.target.password.value;\r\n\r\n        if(!username || !password){\r\n            alert('please enter username and password');\r\n        }else{\r\n            props.Login(\r\n                e.target.username.value,\r\n                e.target.password.value\r\n            );\r\n        }\r\n    }\r\n\r\n  return(\r\n    <div className=\"container1\">\r\n        <div className=\"box1\">\r\n            <div className=\"content1\">\r\n                <header>login</header>\r\n                <form action=\"/\" method=\"post\" onSubmit={onLoginData}>\r\n                    <input className=\"username\" type=\"text\" name=\"username\" placeholder=\"username\" ></input>\r\n                    <input className=\"password\" type=\"password\" name=\"password\" placeholder=\"password\"></input>\r\n                    <input className=\"submit\" type=\"submit\" value=\"submit\"></input>\r\n                </form>\r\n                <div className=\"taga\">\r\n                    <input type=\"button\" value=\"Sign Up\" onClick={onSignPage}></input>      \r\n                </div>\r\n            </div>\r\n            <div className=\"content2\">\r\n                <h3>Lorem Ipsum</h3>\r\n                <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.</p>\r\n                <div className=\"img\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default LoginPage","import React from 'react';\r\nimport './style.css';\r\n\r\n/**\r\n* @author\r\n* @function LoginOn\r\n**/\r\n\r\nconst LoginOn = (props) => {\r\n\r\n  const onLoginPage = (e) =>{\r\n    e.preventDefault();\r\n    props.onLoginPage();\r\n  }\r\n\r\n\r\n  return(\r\n    <div className=\"container3\">\r\n        <div className=\"box3\">\r\n            <div className=\"content1\">\r\n                <h1>Welcome {props.userName}</h1>\r\n                <p>Click the button below to <span>logout</span></p>\r\n                <div className=\"taga\">\r\n                  <input type=\"button\" value=\"Logout\" onClick={onLoginPage}></input> \r\n                </div>\r\n            </div>\r\n            <div className=\"content2\">\r\n                <div className=\"img\">\r\n                  <h3>username:{props.userName}</h3>\r\n                  <p>email:{props.eMail}</p>   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default LoginOn","import React,{ useState} from 'react';\n// import {BrowserRouter as Router, Route, NavLink} from 'react-router-dom';\nimport './App.css';\nimport SingUp from './components/SignUp';\nimport LoginPage from './components/LoginPage';\nimport LoginOn from './components/LoginOn';\n\nfunction App() {\n  console.log('app render');\n\n  const [mode,setMode] = useState('login');\n\n  // submit-> LoginPage Change\n\n  let _contents = null;\n\n  const onSignUpPage = () =>{\n    setMode('signup');\n  }\n\n  const onLoginPage = () =>{\n    setMode('login');\n  }\n  \n  \n  // data receive from signup \n  \n  \n  const [data,setData] = useState([\n  ]);\n  \n  const [userdata,setUserdata] =useState();\n  const [emaildata,setEmaildata] =useState();\n\n  let _username = null;\n  let _password = null;\n  let _email = null;\n  \n  const onSign = (_username,_password,_email) =>{\n    let _data = data.concat(\n      {username:_username, password:_password, email:_email}\n      );\n      setData(_data);\n      setMode('login');\n    }\n\n  const onLogin = (_username,_password) =>{\n    let i = 0;\n    while(i < data.length){\n      let datas = data[i];\n      if(datas.username === _username){\n        if(datas.password === _password){\n          setUserdata(datas.username);\n          setEmaildata(datas.email);\n          console.log('datas.username',datas.username);\n          setMode('loginOn');\n          break;\n        }else{\n          alert('check');\n          break;\n        }\n      }\n      i = i + 1;\n    }\n  }\n\n    \n    if(mode === 'login'){\n      _contents = <LoginPage onSignUp={onSignUpPage} Login={onLogin}></LoginPage>\n    }else if(mode === 'signup'){\n      _contents = <SingUp onLogin={onLoginPage} SignOn={onSign}></SingUp>\n    }else if(mode === 'loginOn'){console.log('username',_username);\n      _contents = <LoginOn userName={userdata} eMail={emaildata} onLoginPage={onLoginPage}></LoginOn>\n    }\n\n    \n  return (\n      <div className=\"App\">\n        <div className=\"background-img\"></div>\n        {_contents}\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}